<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
namespace:名称空间，一般需要保持全局唯一  最好和dao层的java接口一致
可以映射 sql语句 到对应的方法名称和参数、返回类型
-->
<mapper namespace="net.xdclass.online_class.dao.VideoMapper">
    <!--开启mapper的namespace下的二级缓存-->
    <!--
        eviction:代表的是缓存回收策略，常见下面两种。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们

        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果不配置它，当SQL被执行的时候才会去刷新缓存。

        size:引用数目，代表缓存最多可以存储多少个对象，设置过大会导致内存溢出

        readOnly:只读，缓存数据只能读取而不能修改，默认值是false
    -->
    <cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>


    <sql id="base_video_field">
        id,title,summary,cover_img
    </sql>
    <!--
    statement sql
    id:当前mapper下需要唯一
    resultType： sql查询结果集的封装
    useCache 是否走缓存
    -->
    <!--<select id="selectById" resultType="net.xdclass.online_class.domain.Video">-->
    <select id="selectById" resultType="Video" useCache="false">
        select <include refid="base_video_field" /> from video where id = #{video_id}
    </select>
    
    <select id="selectByPointAndTitleLike" resultType="net.xdclass.online_class.domain.Video">
        select * from video where point=#{point} and title like concat('%',#{title},'%')
    </select>

    <!--插入成功后返回自增主键  useGeneratedKeys="true" keyProperty="id" keyColumn="id"-->
    <insert id="add" parameterType="net.xdclass.online_class.domain.Video" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into video(`title`,`summary`,`cover_img`,`price`,`create_time`,`point`)
        values
        (#{title,jdbcType=VARCHAR},#{summary,jdbcType=VARCHAR},#{coverImg,jdbcType=VARCHAR},#{price,jdbcType=INTEGER},
        #{createTime,jdbcType=TIMESTAMP},#{point,jdbcType=DOUBLE})
    </insert>

    <!--批量插入-->
    <insert id="addBatch" parameterType="net.xdclass.online_class.domain.Video">
        insert into video(`title`,`summary`,`cover_img`,`price`,`create_time`,`point`)
        values
        <foreach collection="list" item="video" separator="," index="index">
        (#{video.title,jdbcType=VARCHAR},#{video.summary,jdbcType=VARCHAR},#{video.coverImg,jdbcType=VARCHAR},#{video.price,jdbcType=INTEGER},
        #{video.createTime,jdbcType=TIMESTAMP},#{video.point,jdbcType=DOUBLE})
        </foreach>
    </insert>

    <update id="updateVideo" parameterType="net.xdclass.online_class.domain.Video">
        UPDATE video
         set
          title = #{title,jdbcType=VARCHAR},
          summary = #{summary,jdbcType=VARCHAR},
          cover_img = #{coverImg,jdbcType=VARCHAR},
          price = #{price,jdbcType=INTEGER},
          create_time = #{createTime,jdbcType=TIMESTAMP},
          point = #{point,jdbcType=DOUBLE}
         WHERE
         id = #{id}
    </update>

    <update id="updateVideoSelective" parameterType="net.xdclass.online_class.domain.Video">
        UPDATE video

         <trim prefix="set" suffixOverrides=",">
             <if test="title != null">title = #{title,jdbcType=VARCHAR},</if>

             <if test="summary != null">summary = #{summary,jdbcType=VARCHAR},</if>

             <if test="coverImg != null">cover_img = #{coverImg,jdbcType=VARCHAR},</if>

             <if test="price != 0">price = #{price,jdbcType=INTEGER},</if>

             <if test="createTime != null">create_time = #{createTime,jdbcType=TIMESTAMP},</if>

             <if test="point != null">point = #{point,jdbcType=DOUBLE}</if>
         </trim>
        WHERE
        id = #{id}
    </update>



    <delete id="deleteByCreateTimeAndPrice" parameterType="java.util.Map">
        delete from video where create_time <![CDATA[ > ]]> #{createTime} and price <![CDATA[ <= ]]> #{price};
    </delete>

    <resultMap id="VideoResultMap" type="Video">
        <!--
        ID:指定查询列的唯一标识
        column 数据库字段的名称
        property pojo类的名称
        -->
        <id column="id" property="id" jdbcType="INTEGER"></id>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="summary" property="summary" jdbcType="VARCHAR"/>
        <result column="cover_img" property="coverImg" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="selectBaseFieldByWithResultMap" resultMap="VideoResultMap">
        select <include refid="base_video_field" /> from video where id = #{video_id}
    </select>





</mapper>